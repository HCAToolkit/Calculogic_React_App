/* ==========================================================================
   CORE LAYOUT & PAGE STRUCTURE
   ========================================================================== */

/* Root container
   • Sets up a column flexbox spanning the full viewport
   • Prevents overall page scrolling (inner panes handle overflow)
   • Establishes a sane default font 
*/
.build-container {
  display: flex;
  flex-direction: column;
  height: 100vh;       /* fill screen height */
  overflow: hidden;     /* inner panels scroll instead */
  font-family: sans-serif;
  width: 100vw;         /* fill screen width */
}

/* ==========================================================================
   HEADER & NAVIGATION
   ========================================================================== */

/* Top bar containing title and main tabs
   • Stays fixed at the top: flex-shrink:0
   • Border to separate from content
*/
.builder-header {
  display: flex;
  align-items: center;
  padding: 0 1rem;
  background: #fff;
  border-bottom: 1px solid #ddd;
  flex-shrink: 0;       /* never collapse on small screens */
}

/* Title styling */
.builder-header h1 {
  margin: 0;
  font-size: 1.25rem;
}

/* Tab list container */
.main-tabs {
  display: flex;
  margin-left: 2rem;
  gap: 0.5rem;         /* space between tabs */
}

/* Individual tab button */
.main-tabs .tab {
  padding: 0.5rem 1rem;
  background: transparent;
  border: none;
  border-bottom: 2px solid transparent;  /* underline on active */
  cursor: pointer;
}

/* Active tab underline color */
.main-tabs .active {
  border-bottom-color: #000;
}

/* “Publish” button styling, pushed to far right */
.main-tabs .publish {
  margin-left: auto;
  background: #0073aa;
  color: #fff;
  border-radius: 3px;
}

/* ==========================================================================
   ATOMIC CONTROLS PANEL
   ========================================================================== */

/* Container for atomic components & nested split panes
   • Scrollable if content overflows
   • Light grey background to differentiate from rest
*/
.atomic-section {
  padding: 0.5rem;
  overflow-y: auto;
  border: none;
  background: rgba(200, 200, 200, 0.1); /* Light grey background */
}

/* ==========================================================================
   CANVAS & INSPECTOR PANES
   ========================================================================== */

/* Wrapper for the main workspace and side inspector
   • Flex container so inner panes share available space
   • overflow:auto lets either pane scroll independently
   • flex:1 fills the remaining height under the header
*/
.canvas {
  display: flex;
  flex: 1;
  overflow: auto;
}

/* Main content area (“canvas”)  
   • border:none for seamless look  
   • flex:1 so it takes up all leftover width  
   • padding gives inner breathing room  
   • (you may also need min-width:0 to allow proper shrinking)  
*/
.canvas-inner {
  border: none;
  flex: 1;
  padding: 1rem;
}

/* Side inspector/settings panel  
   • initial width hint (SplitPane will override via inline styles)  
   • padding for inner controls  
   • overflow-y:auto so settings list scrolls independently  
   • border:none for clean edge  
*/
.config-settings {
  width: 280px; /* overridden by SplitPane */
  padding: 0.75rem;
  overflow-y: auto;
  border: none;
}

/* ==========================================================================
   SHARED UTILITY CLASSES
   ========================================================================== */

/* Simple list styling  
   • disc bullets inside content box  
   • controlled margins to separate from text  
*/
.list {
  list-style: disc inside;
  margin: 0.5rem 0 1rem;
  padding: 0;
}

/* Button group container  
   • horizontal layout with small gaps  
   • bottom margin to separate from following elements  
*/
.button-group {
  display: flex;
  gap: 0.25rem;
  margin-bottom: 0.5rem;
}
/* Individual button in a group  
   • flex:1 makes buttons equal-width  
   • padding for clickable area  
*/
.button-group button {
  flex: 1;
  padding: 0.25rem;
}

/* Generic “card” or boxed section  
   • subtle border and padding  
   • bottom margin to stack multiple boxes  
*/
.box {
  border: 1px solid #ccc;
  padding: 0.5rem;
  margin-bottom: 1rem;
}

/* Placeholder text style  
   • muted color + italic  
   • centered when used in empty states  
*/
.placeholder {
  color: #666;
  font-style: italic;
  text-align: center;
}

/* ==========================================================================
   RESIZE HANDLES
   ========================================================================== */

/* Base styling for all split-pane drag handles
   • Gradient background for subtle 3D effect
   • Smooth transitions on hover
   • Light shadow for separation
   • Flex centering allows pseudo-elements to align automatically
   • `user-select: none` prevents text drag glitches
*/
.resize-handle {
  background: linear-gradient(90deg, #e0e0e0 0%, #bdbdbd 100%);
  transition: background 0.2s, box-shadow 0.2s;
  box-shadow: 0 0 6px rgba(0,0,0,0.08);
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  user-select: none;
}

/* Hide the default “main” horizontal handles inserted by SplitPane
   • We only use our custom handles
*/
.resize-handle.main-horizontal {
  display: none !important;
}

/* Hover state for better affordance
   • Darken gradient and increase shadow
*/
.resize-handle:hover {
  background: linear-gradient(90deg, #bdbdbd 0%, #e0e0e0 100%);
  box-shadow: 0 0 12px rgba(0,0,0,0.18);
}

/* --------------------------------------------------------------------------
   Horizontal drag handle (between vertically stacked regions)
   -------------------------------------------------------------------------- */
/* Make the bar tall enough to grab, full width of container */
.resize-handle[aria-orientation="horizontal"] {
  height: 12px;       /* Tall enough to grab */
  width: 100%;
  cursor: row-resize;
  margin: -6px 0;    /* Overlap its neighbors */
}
/* Pseudo-element for grip pattern
   • 32px long “dots” to show draggable region
   • repeating-linear-gradient creates dashed look
*/
.resize-handle[aria-orientation="horizontal"]::before {
  width: 32px;
  height: 4px;
  background: repeating-linear-gradient(
    to right,
    #888 0 4px,
    transparent 4px 8px
  );
}

/* --------------------------------------------------------------------------
   Vertical drag handle (between side-by-side panels)
   -------------------------------------------------------------------------- */
/* Make the bar wide enough to grab, full height of container */
.resize-handle[aria-orientation="vertical"] {
  width: 12px;        /* Wide enough to grab */
  height: 100%;
  cursor: col-resize;
  margin: 0 -6px;    /* Overlap its neighbors */
}
/* Pseudo-element for grip pattern
   • 32px tall “dots” to show draggable region
   • repeating-linear-gradient creates dotted line
*/
.resize-handle[aria-orientation="vertical"]::before {
  content: '';
  display: block;
  width: 4px;
  height: 32px;
  margin: auto;
  border-radius: 2px;
  background: repeating-linear-gradient(
    to bottom,
    #888 0 4px,
    transparent 4px 8px
  );
}

/* ==========================================================================
   DOCKABLE PANELS & COLLAPSE CONTROLS
   ========================================================================== */

/* Container wrapping all dockable panels
   • Ensures panels fill available height/width
*/
.dock-panel-group {
  height: 100%;
  width: 100%;
}

/* Base panel styling
   • Light background to distinguish from canvas
   • box-sizing:border-box so padding is included in size
   • position:relative for absolutely positioned collapse buttons
*/
.dock-panel {
  background: #f8f9fa;
  height: 100%;
  box-sizing: border-box;
  /* Remove border if present */
  border: none;
  position: relative;
}

/* Right‐hand inspector panel
   • Display as flex column so content stacks vertically
   • width:auto here allows SplitPane to override flex-basis
   • z-index boost to keep collapse button above handles
*/
.dock-panel.right-dock-panel {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  height: 100%;
  position: relative;
  z-index: 20;        /* sits above resize handles */
}

/* --------------------------------------------------------------------------
   COLLAPSE BUTTON (shared)
/* -------------------------------------------------------------------------- */

/* Collapse toggle in each panel corner
   • Absolute positioning top-right for left panels, and sticks out for right
   • Semi-transparent default, fully opaque on hover
*/
.collapse-btn {
  position: absolute;
  top: 8px;
  right: 8px;         /* overridden on right-hand instances */
  z-index: 2;
  background: #e0e0e0;
  border: none;
  border-radius: 50%;
  width: 22px;
  height: 22px;
  font-size: 1rem;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s;
}
.collapse-btn:hover {
  opacity: 1;
  background: #bdbdbd;
}

/* Right‐panel collapse button variant
   • Moves button to left edge so it’s visible when panel is collapsed
   • Adds border/shadow for separation
*/
.collapse-btn.right {
  right: auto;
  left: -11px; /* Half the button width, so it sticks out */
  top: 8px;
  background: #e0e0e0;
  border: 1px solid #ccc;
  box-shadow: 1px 0 4px rgba(0,0,0,0.08);
}

/* Optional: keep it above the resize handle */
.dock-panel.right-dock-panel {
  z-index: 20;
}

/* --------------------------------------------------------------------------
   SECTION (nested) PANELS & HANDLES
   -------------------------------------------------------------------------- */

/* Container for each collapsible sub-section
   • Light background and border to separate sections
   • min-height ensures header always visible
*/
.left-section-panel {
  background: #f3f6fa;
  border-bottom: 1px solid #d0d6e0;
  position: relative;
  min-height: 32px;
  transition: background 0.2s;
}


/* Collapse button inside each section
   • Smaller than main collapse, positioned top-left
   • Flex centering for icon/text
*/
.section-collapse-btn {
  position: absolute;
  top: 6px;
  left: 6px;
  z-index: 2;
  background: #e0e0e0;
  border: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  font-size: 0.9rem;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s, background 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
}
.section-collapse-btn:hover {
  opacity: 1;
  background: #bdbdbd;
}

/* Thin handles for section resizing
   • Distinct from main handles: smaller thickness
   • Gradient background for subtle visibility
*/
.resize-handle.section {
  background: linear-gradient(90deg, #d0d6e0 0%, #e0e0e0 100%);
  min-height: 6px;
  height: 6px;
  margin: -3px 0;
  user-select: none;
}
.resize-handle.section[aria-orientation="horizontal"] {
  height: 6px;
  min-height: 6px;
  width: 100%;
  cursor: row-resize;
}
.resize-handle.section[aria-orientation="vertical"] {
  width: 6px;
  min-width: 6px;
  height: 100%;
  cursor: col-resize;
}
.resize-handle.section:hover {
  background: linear-gradient(90deg, #bdbdbd 0%, #d0d6e0 100%);
}

/* Section header styling
   • Indented to make room for collapse button
   • Consistent margins and font styling
*/
.left-section-panel h4 {
  margin-left: 32px;
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  font-size: 1.05rem;
  font-weight: 600;
  color: #223;
}

/* Accessibility: focus outlines for both collapse buttons */
.collapse-btn:focus,
.section-collapse-btn:focus {
  outline: 2px solid #0073aa;
  outline-offset: 2px;
}

/* --------------------------------------------------------------------------
   UTILITY & EDGE‐CASE HANDLING
   -------------------------------------------------------------------------- */

/* Double-click hint: full-size pseudo-element
   • Keeps hit area consistent but invisible
*/
.resize-handle::after,
.resize-handle.section::after {
  content: '';
  display: block;
  width: 100%;
  height: 100%;
  pointer-events: none;
}


/* Visual cue for empty sections
   • Lower opacity when no child .atomic-section exists
*/
.left-section-panel:has(.atomic-section:empty) {
  min-height: 24px;
  background: #f8f9fa;
  opacity: 0.5;
}

/* Dark‐mode overrides for visibility on dark backgrounds */
@media (prefers-color-scheme: dark) {
  .resize-handle,
  .resize-handle.section {
    background: linear-gradient(90deg, #444 0%, #888 100%);
  }
  .resize-handle:hover,
  .resize-handle.section:hover {
    background: linear-gradient(90deg, #888 0%, #444 100%);
  }
}

/* ==========================================================================
   DARK MODE STYLES
   ========================================================================== */

/* Base dark theme colors
   • Applies to both body.dark class or any .dark wrapper
   • Sets background and default text color for dark mode
*/
body.dark, .dark {
  background: #181a1b;
  color: #e0e0e0;
}

/* Header & tabs in dark mode
   • Darker background to blend with page
   • Border to separate from content
*/
body.dark .builder-header,
.dark .builder-header {
  background: #23272a;
  border-bottom: 1px solid #333;
}

/* Tab text color and active underline in dark mode */
body.dark .main-tabs .tab,
.dark .main-tabs .tab {
  color: #e0e0e0;
}
body.dark .main-tabs .active,
.dark .main-tabs .active {
  border-bottom-color: #fff;
}

/* Dock panels background in dark mode */
body.dark .dock-panel,
.dark .dock-panel {
  background: #23272a;
}

/* Section panels background & borders in dark mode */
body.dark .left-section-panel,
.dark .left-section-panel {
  background: #23272a;
  border-bottom: 1px solid #333;
}

/* Section headers and lists in dark mode */
body.dark .left-section-panel h4,
.dark .left-section-panel h4,
body.dark .left-section-panel .list,
.dark .left-section-panel .list li {
  color: #fff;
}

/* Box/card components in dark mode
   • Adjust border and background for contrast
   • Use muted text color
*/
body.dark .box,
.dark .box {
  border-color: #444;
  background: #222;
  color: #ccc;
}

/* Resize handle gradients in dark mode */
body.dark .resize-handle,
.dark .resize-handle {
  background: linear-gradient(90deg, #444 0%, #888 100%);
}
body.dark .resize-handle:hover,
.dark .resize-handle:hover {
  background: linear-gradient(90deg, #888 0%, #444 100%);
}

/* ==========================================================================
   DRAG HANDLE FOR SIDE PANELS (“PANEL-DRAG-HANDLE”)
   ========================================================================== */

/* Base bar that spans full height of panel edge
   • Provides a clear grab area for resizing
   • Slight gradient and shadow for visual separation
*/
.panel-drag-handle {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 16px; /* was 28px, now thinner */
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 15;
  cursor: ew-resize; /* horizontal resize cursor */
  background: linear-gradient(90deg, #e0e0e0 60%, #bdbdbd 100%);
  transition: background 0.2s;
  /* Add a subtle shadow for separation */
  box-shadow: 2px 0 6px rgba(0,0,0,0.04);
}

/* Left-side handle variant
   • Positioned on the right edge of left panel
   • Rounded inner corners
*/
.panel-drag-handle.left {
  right: 0;
  border-left: 1px solid #ccc;
  border-radius: 0 8px 8px 0;
}

/* Right-side handle variant
   • Positioned on the left edge of right panel
   • Rounded inner corners
*/
.panel-drag-handle.right {
  left: 0;
  border-right: 1px solid #ccc;
  border-radius: 8px 0 0 8px;
}

/* Grip dots container
   • Vertical stack of small dots to indicate draggable area
*/
.panel-drag-handle .grip {
  width: 6px; /* was 8px */
  height: 36px; /* was 48px */
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 6px;
}


/* Individual grip dot
   • Circular dot for visual affordance
   • Semi-transparent for subtlety
*/
.panel-drag-handle .grip-dot {
  display: none;
}

/* --- Drag handle visual: replace many dots with one "≡" symbol --- */

/* hide the existing dot elements while keeping them in DOM (no JSX change required) */
.panel-drag-handle .grip-dot {
  display: none;
}

/* make the handle largely transparent to pointer events so wheel/scroll can reach the panel's scrollbar.
   Only the central .grip will accept pointer events for dragging. */
.panel-drag-handle {
  pointer-events: none; /* allow wheel events and clicks to pass through to panel content except on .grip */
  cursor: ew-resize; /* maintain resize cursor as fallback */
}

/* central small hit target that actually receives pointer events for dragging */
.panel-drag-handle .grip {
  pointer-events: auto;
  width: 28px;               /* comfortable hit area */
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  background: transparent;
  transition: background 120ms ease, box-shadow 120ms ease, transform 120ms ease;
  cursor: ew-resize;         /* explicit cursor over the grip */
}

/* render a single ≡ character centered in the grip */
.panel-drag-handle .grip::before {
  content: "≡";
  font-size: 18px;
  line-height: 1;
  color: #4a4a4a;
  display: block;
  transition: color 120ms ease, transform 120ms ease;
  will-change: transform, color;
}

/* hover/focus visual feedback on the small grip */
.panel-drag-handle .grip:hover,
.panel-drag-handle .grip:focus {
  background: rgba(0,0,0,0.06);
  box-shadow: 0 4px 14px rgba(0,0,0,0.10);
  transform: translateY(-1px);
}
.panel-drag-handle .grip:hover::before,
.panel-drag-handle .grip:focus::before {
  color: #222;
  transform: scale(1.06);
}

/* keep strong visible affordance when keyboard-focused */
.panel-drag-handle .grip:focus {
  outline: 2px solid rgba(0,115,170,0.18);
  outline-offset: 2px;
}

/* Ensure both left & right variants inherit the behavior */
/* Removed empty ruleset for .panel-drag-handle.left .grip, .panel-drag-handle.right .grip */

/* Dark mode overrides for drag handles */
body.dark .panel-drag-handle,
.dark .panel-drag-handle {
  background: linear-gradient(90deg, #444 60%, #888 100%);
  border-color: #333;
}
body.dark .panel-drag-handle .grip-dot,
.dark .panel-drag-handle .grip-dot {
  background: #bbb;
  opacity: 0.8;
}
body.dark .panel-drag-handle .grip::before {
  color: #f0f0f0;
}

/* --- Responsive Layout --- */
